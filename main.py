# main.py
from models import consultar_modelos
from metrics import avaliar_respostas
from report import salvar_resultados

# System Prompts Edit√°veis
SYSTEM_PROMPTS = {
    "queries": """Voc√™ √© um especialista em pesquisa jur√≠dica brasileira. Sua tarefa √© gerar queries de busca precisas e eficazes para encontrar informa√ß√µes relevantes sobre legisla√ß√£o, jurisprud√™ncia e normas brasileiras.

Diretrizes:
- Use termos jur√≠dicos espec√≠ficos e precisos
- Inclua sin√¥nimos e varia√ß√µes terminol√≥gicas
- Considere diferentes n√≠veis de governo (federal, estadual, municipal)
- Foque em aspectos pr√°ticos e procedimentais
- Use linguagem formal e t√©cnica apropriada""",
    
    "resposta": """Voc√™ √© um assistente jur√≠dico especializado em direito brasileiro. Sua fun√ß√£o √© fornecer respostas claras, precisas e bem fundamentadas sobre quest√µes legais, baseando-se exclusivamente no contexto fornecido.

Diretrizes:
- Base suas respostas APENAS no contexto fornecido
- Cite as fontes legais quando dispon√≠veis (leis, decretos, etc.)
- Use linguagem clara e acess√≠vel, mas tecnicamente precisa
- Estruture a resposta de forma l√≥gica e organizada
- Se o contexto for insuficiente, indique claramente essa limita√ß√£o
- N√£o invente informa√ß√µes que n√£o estejam no contexto"""
}

def main():
    print("üéØ [MAIN] Iniciando pipeline de avalia√ß√£o de modelos")
    print(f"üìã [MAIN] System Prompts configurados:")
    print(f"   - Queries: {len(SYSTEM_PROMPTS['queries'])} caracteres")
    print(f"   - Resposta: {len(SYSTEM_PROMPTS['resposta'])} caracteres")
    
    perguntas = [
        "Quais s√£o os direitos do consumidor no Brasil?",
        "Como funciona o processo de aposentadoria no INSS?",
        "Quais s√£o as regras para abertura de empresa no Brasil?"
    ]
    
    print(f"üìù [MAIN] {len(perguntas)} perguntas ser√£o processadas")
    
    todos_resultados = []
    
    for i, pergunta in enumerate(perguntas, 1):
        print(f"\n{'='*60}")
        print(f"üîÑ [MAIN] Processando pergunta {i}/{len(perguntas)}")
        print(f"‚ùì [MAIN] Pergunta: '{pergunta}'")
        print(f"{'='*60}")
        
        try:
            # Consultar modelos com system prompts
            print(f"ü§ñ [MAIN] Consultando modelos...")
            respostas, logs, queries, contextos = consultar_modelos(pergunta, SYSTEM_PROMPTS)
            print(f"‚úÖ [MAIN] Respostas obtidas de {len(respostas)} modelos")
            
            # Avaliar respostas
            print(f"üìä [MAIN] Iniciando avalia√ß√£o das respostas...")
            metricas = avaliar_respostas(respostas, contextos, pergunta, logs)
            print(f"‚úÖ [MAIN] Avalia√ß√£o conclu√≠da")
            
            # Compilar resultados
            for modelo in respostas:
                resultado = {
                    "pergunta": pergunta,
                    "modelo": modelo,
                    "resposta": respostas[modelo],
                    "queries_geradas": queries.get(modelo, []),
                    "num_contextos": len(contextos.get(modelo, [])),
                    "tempo_geracao_queries": logs[modelo]["tempo_geracao_queries"],
                    "tempo_resposta": logs[modelo]["tempo_resposta"],
                    "tokens_resposta": logs[modelo]["tokens_resposta"],
                    "faithfulness": metricas.get(modelo, {}).get("faithfulness", 0.0),
                    "answer_relevancy": metricas.get(modelo, {}).get("answer_relevancy", 0.0),
                    "system_prompt_queries": SYSTEM_PROMPTS["queries"],
                    "system_prompt_resposta": SYSTEM_PROMPTS["resposta"]
                }
                todos_resultados.append(resultado)
                print(f"üìã [MAIN] Resultado compilado para {modelo}: faithfulness={resultado['faithfulness']:.3f}, relevancy={resultado['answer_relevancy']:.3f}")
                
        except Exception as e:
            print(f"‚ùå [MAIN] Erro ao processar pergunta '{pergunta}': {e}")
            continue
    
    print(f"\n{'='*60}")
    print(f"üíæ [MAIN] Salvando {len(todos_resultados)} resultados...")
    
    # Salvar resultados
    try:
        salvar_resultados(todos_resultados)
        print(f"‚úÖ [MAIN] Resultados salvos com sucesso!")
    except Exception as e:
        print(f"‚ùå [MAIN] Erro ao salvar resultados: {e}")
    
    print(f"üéâ [MAIN] Pipeline conclu√≠do!")

if __name__ == "__main__":
    main()
